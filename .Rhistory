# Clean workspace:
rm(list = ls())
# Set working directory:
# directory to save models (local disk)
saveDir = 'C:/Users/moroncog/Documents/StockAssessmentModels/SpatialStockAssessmentGroup'
# Libraries:
require(r4ss)
require(ss3diags)
library(icesAdvice)
### Model path
type_model <- '4A_25_ageS_PY_CPUEst_tags_move' ## *CHANGE name
subfolder = 'dat_4A_1'
mod_path = paste0(saveDir, '/', file.path(type_model, subfolder))
## Retros for directories
plotdir_retro<- paste(mod_path, "/retros", sep="")
dir.create(plotdir_retro)
yper = 0:-5 ## years period for retros
r4ss::retro(dir=mod_path, oldsubdir="", newsubdir = "retros", extras="-nohess",
subdirstart = "retro",years = yper, overwrite = TRUE, exe = "ss")
retroModels <- SSgetoutput(dirvec=file.path(mod_path, "retros",
paste("retro",yper,sep="")))
save(retroModels, file=paste0(mod_path,
"/retros/retroModels.RData", sep=""))
retroSummary <- SSsummarize(retroModels) # retro 0 is replist 1
endyrvec <- retroSummary$endyrs + yper
## Comparison plot pdf
SSplotComparisons(retroSummary, endyrvec=endyrvec, xlim=c(1121,1256),
legendlabels=paste("Data",yper,"years"), print=FALSE, pdf=TRUE,
plotdir = plotdir_retro)
## Retro recruits
SSplotRetroRecruits(retroSummary, endyrvec=endyrvec, cohorts=1125:1256,
relative=TRUE, legend=FALSE)
dev.off()
# Plot biomass:
plot_name = '4A_25_retro'
SSplotComparisons(retroSummary, subplot = 1, legendlabels=paste("Data",yper,"years"), png = TRUE,
plotdir = 'figures', filenameprefix = plot_name)
x11()
SSplotComparisons(retroSummary, subplot = 1, legendlabels=paste("Data",yper,"years"), png = TRUE,
plotdir = 'figures', filenameprefix = plot_name)
# Plot biomass:
plot_name = '4A_25_retro'
SSplotComparisons(retroSummary, subplot = 1, legendlabels=paste("Data",yper,"years"), png = TRUE,
plotdir = 'figures', filenameprefix = plot_name)
## Summarize the list of retroModels
retroSummary <- r4ss::SSsummarize(retroModels)
#
# ## Now Check retros Analysis with one-step ahead Forecasts
sspar(mfrow=c(2,1),plot.cex = 0.9)
SSplotRetro(retroSummary,forecast = F,add=T)
SSplotRetro(retroSummary,forecast = F,add=T, xmin=1985)
dev.print(jpeg,paste0(mod_path,"/Retroforecast_.jpg"), width = 8,
height = 9, res = 300, units = "in")
## Do Hindcast with Cross-Validation of CPUE observations
png(paste0(mod_path,"/HCxvalIndex.png"), height = 140, width = 190, units = 'mm', res = 500)
sspar(mfrow=c(1,1),plot.cex = 0.9)
SSplotHCxval(retroSummary,xmin=1972,add=T)
dev.off()
## Use new converter fuction SSretroComps()
hccomps = SSretroComps(retroModels)
png(paste0(mod_path,"/HCxvalLen.png"), height = 140, width = 190, units = 'mm', res = 500)
sspar(mfrow=c(2,2),plot.cex = 0.7)
SSplotHCxval(hccomps,add=T,subplots = "len",legendloc="topleft")
#dev.print(jpeg,paste0(dirplot,"/HCxvalLen_.jpg"), width = 8,
#         height = 4, res = 300, units = "in")
dev.off()
## Do Hindcast with Cross-Validation of CPUE observations
png(paste0(mod_path,"/HCxvalIndex.png"), height = 140, width = 190, units = 'mm', res = 500)
sspar(mfrow=c(2,2),plot.cex = 0.9)
SSplotHCxval(retroSummary,xmin=1972,add=T)
dev.off()
setwd("~/GitHub/SpatialStockAssessment_SpanishGroup")
## Bio trend from base model ---------------------------------------------------
rm(list = ls())
library(r4ss)
require(stringr)
require(dplyr)
require(ggplot2)
saveDir = 'C:/Users/moroncog/Documents/StockAssessmentModels/SpatialStockAssessmentGroup'
# Read model outputs for 1A model:
load('Year_runs/20 assessments year CPUE st 1A.RData')
Y1A = ggdat
Y1A$model_name = '1A_25_Y'
load('Year_runs/20 assessments year CPUE st 4A.RData')
Y4A = ggdat
Y4A$model_name = '4A_25_Y'
# Information Year model:
Year_config = rbind(Y1A[,c('years', 'ssb_val', 'F_val', 'run', 'model_name')],
Y4A[,c('years', 'ssb_val', 'F_val', 'run', 'model_name')])
Year_config$run  = as.numeric(as.character(Year_config$run ))
# Info:
yrvector = 1001:1256 # could be any vector (decimals to include seasons)
min_grad = 0.1
### Model path
mod_path = paste0(saveDir, '/', file.path(type_model, subfolder))
# Info:
yrvector = 1001:1256 # could be any vector (decimals to include seasons)
min_grad = 0.1
# -------------------------------------------------------------------------
# Main directories (model types):
dir_mods = c('1A_25_ageS_PY_CPUEst_tags', '4A_25_ageS_PY_CPUEst_tags_move')
# -------------------------------------------------------------------------
# Loop to read results from all replicates:
ts_tmp = list()
cList = 1
for(j in seq_along(dir_mods)) {
mod_path = paste0(saveDir, '/', dir_mods[j])
all_iter = list.files(path = mod_path)
for(k in seq_along(all_iter)) {
iter_name = as.numeric(str_split(string = all_iter[k] , pattern = '_', simplify = TRUE)[1,3])
tmp_mod = SS_output(dir = file.path(mod_path, all_iter[k]), covar = FALSE, verbose = FALSE,
printstats = FALSE)
SSB_info = tmp_mod$derived_quants[grep(pattern = 'SSB_', x = tmp_mod$derived_quants$Label)[3:258], ]
F_info = tmp_mod$derived_quants[grep(pattern = 'F_', x = tmp_mod$derived_quants$Label)[1:256], ]
ts_tmp[[cList]] = data.frame(iter = iter_name, em = dir_mods[j],
year = 1001:1256, SSB = SSB_info$Value,
Fval = F_info$Value, grad = tmp_mod$maximum_gradient_component)
cList = cList+1
print(k)
}
}
# Clean data (no convergence):
ts_data0 = dplyr::bind_rows(ts_tmp)
ts_data0$model_name = ifelse(test = ts_data0$em == '4A_25_ageS_PY_CPUEst_tags_move', yes = '4A_25_PY', no = '1A_25_PY')
ts_data1 = ts_data0[ts_data0$grad < min_grad,c(3,4,5,1,7)]
colnames(ts_data1) = c('years', 'ssb_val', 'F_val', 'run', 'model_name')
# Convergence rate:
conv_rate = ts_data0 %>%
dplyr::group_by(em, iter) %>%
dplyr::summarise(grad = mean(grad))
# Replace years:
ts_data1$years = rep(1952:2015, each = 4)
ts_data1 = ts_data1 %>%
dplyr::group_by(years, run, model_name) %>%
dplyr::summarise(ssb_val = mean(ssb_val), F_val = mean(F_val))
# Merge data sets:
plot_data = rbind(Year_config, ts_data1)
plot_data2 = tidyr::gather(data = plot_data, 'variable', 'value', 2:3)
plot_data3 = plot_data2 %>%
dplyr::group_by(years, model_name, variable) %>%
dplyr::summarise(mean = mean(value), p1 = quantile(value, p = 0.025),
p2 = quantile(value, p = 0.975))
plot_data3$variable[plot_data3$variable == 'F_val'] = 'F'
plot_data3$variable[plot_data3$variable == 'ssb_val'] = 'SSB'
plot_data3
save(plot_data3, file = 'Year_runs/replicates_all.RData')
plot_data4 = plot_data3[plot_data3$model_name == '1A_25_Y' | plot_data3$model_name == '1A_25_PY', ]
ggplot(plot_data4, aes(x = years, y = mean, ymin=p1, ymax=p2)) +
labs(y = '') +
geom_ribbon(alpha=.3) +
geom_line(lwd=1) +
theme_bw() +
facet_grid(variable ~ model_name, scales = 'free_y')
plot_data4 = plot_data3[plot_data3$model_name == '4A_25_Y' | plot_data3$model_name == '4A_25_PY', ]
ggplot(plot_data4, aes(x = years, y = mean, ymin=p1, ymax=p2)) +
labs(y = '') +
geom_ribbon(alpha=.3) +
geom_line(lwd=1) +
theme_bw() +
facet_grid(variable ~ model_name, scales = 'free_y')
setwd("~/GitHub/SpatialStockAssessment_SpanishGroup")
## Bio trend from base model ---------------------------------------------------
rm(list = ls())
library(r4ss)
saveDir = 'C:/Users/moroncog/Documents/StockAssessmentModels/SpatialStockAssessmentGroup'
### Model path
type_model <- '4A_25_ageS_PY_CPUEst_tags_move' ## *CHANGE name
subfolder = 'dat_4A_1'
mod_path = paste0(saveDir, '/', file.path(type_model, subfolder))
replist <- SS_output(dir = mod_path, verbose=TRUE, printstats=TRUE) ## read
## Maturity at length
## Length increments in population length bins (distance between bins)
increments <- replist$lbinspop[-1]-replist$lbinspop[-replist$nlbinspop]
increments <- c(increments, increments[length(increments)])
## Length at mid-point of population length bins
len <- replist$lbinspop + increments/2
matslope <- as.numeric(replist$MGparmAdj$"Mat_slope_Fem")[1]
matl50 <- as.numeric(replist$MGparmAdj$"Mat50%_Fem")[1]
matlen <- 1/( 1 + exp(matslope*(len - matl50 )) ) # Ogiva: % matures by length
## Weight at length
wlena <- as.numeric(replist$MGparmAdj$Wtlen_1_Fem)[1]
wlenb <- as.numeric(replist$MGparmAdj$Wtlen_2_Fem)[1]
wlen <- wlena*(len^wlenb) # Weight at length for each one of the lengths
library(dplyr)
natlen<-replist$natlen
names(natlen)
natlen<-natlen %>% filter(Sex==1, `Beg/Mid`=="B", Seas==1)
library(plyr)
vec=colnames(natlen)
ind=which(vec=="10"); lvec=length(vec)
vec=vec[ind:lvec]
N=unique(natlen$Yr)
for (i in 1:length(vec)){
aux=aggregate(natlen[,ind+i-1], by=list(Category=natlen$Yr), FUN=sum)
N=cbind(N,aux[,2])
}
colnames(N)=c("Yr",vec)
## Total
laux=length(unique(natlen$Yr))
year=unique(natlen$Yr)[1:(laux-3)] # 3 forecast years
l_l=length(unique(wlen))
l_y=length((year))
SSB=matrix(0,ncol=l_l,nrow=l_y)
B=matrix(0,ncol=l_l,nrow=l_y)
for (i in 1:l_y){
for (j in 1:l_l){
SSB[i,j]=N[i,j+1]*wlen[j]*matlen[j]
B[i,j]=N[i,j+1]*wlen[j]
}
}
ssb_t=apply(SSB, 1,sum)
b_t=apply(B, 1,sum)
bio<-cbind(b_t, year)
bio<-as.data.frame(bio)
colnames(bio)<-c("bio","year")
# Replace years for pseudoyear model :
bioPS4A = bio
bioPS4A$year = c(rep(1952:2014, each= 4), 2015, 2015)
bioPS4A = bioPS4A %>%
dplyr::group_by(year) %>%
dplyr::summarise(bio = mean(bio))
plot(bioPS4A$bio~bioPS4A$year, type="l")
save(bioPS4A, file="SPiCT_model/PY_4A.RData")
### Model path
type_model <- '1A_25_ageS_PY_CPUEst_tags' ## *CHANGE name
subfolder = 'dat_1A_1'
mod_path = paste0(saveDir, '/', file.path(type_model, subfolder))
replist <- SS_output(dir = mod_path, verbose=TRUE, printstats=TRUE) ## read
## Maturity at length
## Length increments in population length bins (distance between bins)
increments <- replist$lbinspop[-1]-replist$lbinspop[-replist$nlbinspop]
increments <- c(increments, increments[length(increments)])
## Length at mid-point of population length bins
len <- replist$lbinspop + increments/2
matslope <- as.numeric(replist$MGparmAdj$"Mat_slope_Fem")[1]
matl50 <- as.numeric(replist$MGparmAdj$"Mat50%_Fem")[1]
matlen <- 1/( 1 + exp(matslope*(len - matl50 )) ) # Ogiva: % matures by length
## Weight at length
wlena <- as.numeric(replist$MGparmAdj$Wtlen_1_Fem)[1]
wlenb <- as.numeric(replist$MGparmAdj$Wtlen_2_Fem)[1]
wlen <- wlena*(len^wlenb) # Weight at length for each one of the lengths
library(dplyr)
natlen<-replist$natlen
names(natlen)
natlen<-natlen %>% filter(Sex==1, `Beg/Mid`=="B", Seas==1)
library(plyr)
vec=colnames(natlen)
ind=which(vec=="10"); lvec=length(vec)
vec=vec[ind:lvec]
N=unique(natlen$Yr)
for (i in 1:length(vec)){
aux=aggregate(natlen[,ind+i-1], by=list(Category=natlen$Yr), FUN=sum)
N=cbind(N,aux[,2])
}
colnames(N)=c("Yr",vec)
## Total
laux=length(unique(natlen$Yr))
year=unique(natlen$Yr)[1:(laux-3)] # 3 forecast years
l_l=length(unique(wlen))
l_y=length((year))
SSB=matrix(0,ncol=l_l,nrow=l_y)
B=matrix(0,ncol=l_l,nrow=l_y)
for (i in 1:l_y){
for (j in 1:l_l){
SSB[i,j]=N[i,j+1]*wlen[j]*matlen[j]
B[i,j]=N[i,j+1]*wlen[j]
}
}
ssb_t=apply(SSB, 1,sum)
b_t=apply(B, 1,sum)
bio<-cbind(b_t, year)
bio<-as.data.frame(bio)
colnames(bio)<-c("bio","year")
# Replace years for pseudoyear model :
bioPS4A = bio
bioPS4A$year = c(rep(1952:2014, each= 4), 2015, 2015)
bioPS4A = bioPS4A %>%
dplyr::group_by(year) %>%
dplyr::summarise(bio = mean(bio))
plot(bioPS4A$bio~bioPS4A$year, type="l")
save(bioPS4A, file="SPiCT_model/PY_1A.RData")
# Read data
load("SPiCT_model/spict.RData") # SPICT trend
load("SPiCT_model/bio trend base model CPUE st 1A.RData")
bio1A<-bio
load("SPiCT_model/PS1A.RData")
load("SPiCT_model/PS4A.RData")
# Read data
load("SPiCT_model/spict.RData") # SPICT trend
load("SPiCT_model/bio trend base model CPUE st 1A.RData")
bio1A<-bio
load("SPiCT_model/PY_1A.RData")
load("SPiCT_model/PY_4A.RData")
load("SPiCT_model/bio trend base model CPUE st 4A.RData")
bio4A<-bio
head(dat)
bio1A
plot_data4 = plot_data3[plot_data3$model_name == '1A_25_Y' | plot_data3$model_name == '1A_25_PY', ]
load('Year_runs/replicates_all.RData')
plot_data4 = plot_data3[plot_data3$model_name == '1A_25_Y' | plot_data3$model_name == '1A_25_PY', ]
plot_data4
setwd("~/GitHub/SpatialStockAssessment_SpanishGroup")
## Bio trend from base model ---------------------------------------------------
rm(list = ls())
library(r4ss)
require(stringr)
require(dplyr)
require(ggplot2)
saveDir = 'C:/Users/moroncog/Documents/StockAssessmentModels/SpatialStockAssessmentGroup'
# Read model outputs for 1A model:
load('Year_runs/20 assessments year CPUE st 1A.RData')
Y1A = ggdat
Y1A$model_name = '1A_25_Y'
load('Year_runs/20 assessments year CPUE st 4A.RData')
Y4A = ggdat
Y4A$model_name = '4A_25_Y'
# Information Year model:
Year_config = rbind(Y1A[,c('years', 'ssb_val', 'F_val', 'run', 'model_name')],
Y4A[,c('years', 'ssb_val', 'F_val', 'run', 'model_name')])
Year_config$run  = as.numeric(as.character(Year_config$run ))
# Info:
yrvector = 1001:1256 # could be any vector (decimals to include seasons)
min_grad = 0.1
# -------------------------------------------------------------------------
# Main directories (model types):
dir_mods = c('1A_25_ageS_PY_CPUEst_tags', '4A_25_ageS_PY_CPUEst_tags_move')
# -------------------------------------------------------------------------
# Loop to read results from all replicates:
ts_tmp = list()
cList = 1
for(j in seq_along(dir_mods)) {
mod_path = paste0(saveDir, '/', dir_mods[j])
all_iter = list.files(path = mod_path)
for(k in seq_along(all_iter)) {
iter_name = as.numeric(str_split(string = all_iter[k] , pattern = '_', simplify = TRUE)[1,3])
tmp_mod = SS_output(dir = file.path(mod_path, all_iter[k]), covar = FALSE, verbose = FALSE,
printstats = FALSE)
SSB_info = tmp_mod$derived_quants[grep(pattern = 'SSB_', x = tmp_mod$derived_quants$Label)[3:258], ]
F_info = tmp_mod$derived_quants[grep(pattern = 'F_', x = tmp_mod$derived_quants$Label)[1:256], ]
ts_tmp[[cList]] = data.frame(iter = iter_name, em = dir_mods[j],
year = 1001:1256, SSB = SSB_info$Value,
Fval = F_info$Value, grad = tmp_mod$maximum_gradient_component)
cList = cList+1
print(k)
}
}
# -------------------------------------------------------------------------
# Loop to read results from all replicates:
ts_tmp = list()
cList = 1
j = 1
mod_path = paste0(saveDir, '/', dir_mods[j])
all_iter = list.files(path = mod_path)
k = 1
iter_name = as.numeric(str_split(string = all_iter[k] , pattern = '_', simplify = TRUE)[1,3])
tmp_mod = SS_output(dir = file.path(mod_path, all_iter[k]), covar = FALSE, verbose = FALSE,
printstats = FALSE)
tmp_mod$derived_quants[grep(pattern = 'R_', x = tmp_mod$derived_quants$Label)[1:256], ]
tmp_mod$derived_quants
View(tmp_mod$derived_quants)
tmp_mod$derived_quants[grep(pattern = 'Recr_', x = tmp_mod$derived_quants$Label)[1:256], ]
R_info = tmp_mod$derived_quants[grep(pattern = 'Recr_', x = tmp_mod$derived_quants$Label)[3:258], ]
View(R_info)
# -------------------------------------------------------------------------
# Loop to read results from all replicates:
ts_tmp = list()
cList = 1
for(j in seq_along(dir_mods)) {
mod_path = paste0(saveDir, '/', dir_mods[j])
all_iter = list.files(path = mod_path)
for(k in seq_along(all_iter)) {
iter_name = as.numeric(str_split(string = all_iter[k] , pattern = '_', simplify = TRUE)[1,3])
tmp_mod = SS_output(dir = file.path(mod_path, all_iter[k]), covar = FALSE, verbose = FALSE,
printstats = FALSE)
SSB_info = tmp_mod$derived_quants[grep(pattern = 'SSB_', x = tmp_mod$derived_quants$Label)[3:258], ]
F_info = tmp_mod$derived_quants[grep(pattern = 'F_', x = tmp_mod$derived_quants$Label)[1:256], ]
R_info = tmp_mod$derived_quants[grep(pattern = 'Recr_', x = tmp_mod$derived_quants$Label)[3:258], ]
ts_tmp[[cList]] = data.frame(iter = iter_name, em = dir_mods[j],
year = 1001:1256, SSB = SSB_info$Value, R_val = R_info$Value,
Fval = F_info$Value, grad = tmp_mod$maximum_gradient_component)
cList = cList+1
print(k)
}
}
# Clean data (no convergence):
ts_data0 = dplyr::bind_rows(ts_tmp)
ts_data0$model_name = ifelse(test = ts_data0$em == '4A_25_ageS_PY_CPUEst_tags_move', yes = '4A_25_PY', no = '1A_25_PY')
head(ts_data0)
ts_data1 = ts_data0[ts_data0$grad < min_grad, c(3,4,6,1,8)]
ts_data1
ts_data2 = ts_data0[ts_data0$grad < min_grad, c(3,4,5,6,1,8)]
ts_data1 = ts_data0[ts_data0$grad < min_grad, c(3,4,6,1,8)]
colnames(ts_data1) = c('years', 'ssb_val', 'F_val', 'run', 'model_name')
ts_data1
head(ts_data1)
head(ts_data2)
ts_data2$iter
ts_data2
# Get values for table
ts_data2 %>%
dplyr::group_by(model_name, iter) %>%
dplyr::summarise(CVSSB = sd(SSB)/mean(SSB), CVR = sd(R_val)/mean(R_val), CVF = sd(Fval)/mean(Fval))
# Get values for table
ts_data3 = ts_data2 %>%
dplyr::group_by(model_name, iter) %>%
dplyr::summarise(CVSSB = sd(SSB)/mean(SSB), CVR = sd(R_val)/mean(R_val), CVF = sd(Fval)/mean(Fval))
vIEW(ts_data3)
View(ts_data3)
# Get values for table
ts_data3 = ts_data2 %>%
dplyr::group_by(model_name, year) %>%
dplyr::summarise(CVSSB = sd(SSB)/mean(SSB), CVR = sd(R_val)/mean(R_val), CVF = sd(Fval)/mean(Fval))
ts_data3
ts_data3 %>%
dplyr::group_by(model_name) %>%
dplyr::summarise(meanSSB = mean(CVSSB), meanR = mean(CVR), meanF = mean(CVF),
sdSSB = sd(CVSSB), sdR = sd(CVR), sdF = sd(CVF))
